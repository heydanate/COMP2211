# -*- coding: utf-8 -*-
"""lab8_task

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FLmTuQPYsK46jjl6cN5H11Rw67gTOn0_
"""

# -*- coding: utf-8 -*-
"""
Submission Template for Lab 8
Important notice: DO NOT use any global variables in this submission file
"""

# Task 1
def data_preprocessing(data_dir, cate2Idx, img_size):
  x = []
  y = []
  ###############################################################################
  # TODO: your code starts here
  for category in cate2Idx:
    category_dir = os.path.join(data_dir, category)
    for img_file in os.listdir(category_dir):
      img_path = os.path.join(category_dir, img_file)
      img = cv2.imread(img_path)
      img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
      img = cv2.resize(img, (img_size, img_size))
      x.append(img)
      y.append(cate2Idx[category])
  # TODO: your code ends here
  ###############################################################################
  x = np.asarray(x)
  y = np.asarray(y)
  return x, y


# Task 2
def get_datagen():
  datagen = None
  ###############################################################################
  # TODO: your code starts here
  datagen = ImageDataGenerator(rotation_range=30,      # randomly rotate images by 30 degrees
                                width_shift_range=0.1,  # randomly shift images horizontally by 10% of the width
                                height_shift_range=0.1, # randomly shift images vertically by 10% of the height
                                horizontal_flip=True,   # randomly flip images horizontally
                                )
  # TODO: your code ends here
  ###############################################################################
  return datagen


# Task 3
def custom_model():
  model = None
  ###############################################################################
  # TODO: your code starts here
  model = Sequential()
  model.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(64, 64, 3)))
  model.add(MaxPooling2D(pool_size=(2, 2)))
  model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
  model.add(MaxPooling2D(pool_size=(2, 2)))
  model.add(Conv2D(filters=128, kernel_size=(3, 3), activation='relu'))
  model.add(MaxPooling2D(pool_size=(2, 2)))
  model.add(Dropout(0.1))
  model.add(Flatten())
  model.add(Dense(units=512, activation='relu'))
  model.add(Dense(units=150, activation='softmax'))
  # TODO: your code ends here
  ###############################################################################
  return model


if __name__ == '__main__':
  # Import necessary libraries
  import os, cv2
  import numpy as np
  from sklearn.model_selection import train_test_split
  import keras
  from keras.utils import np_utils
  from keras.models import Sequential
  from keras.layers import Conv2D, MaxPooling2D
  from keras.layers import Dense, Dropout, Flatten
  from keras.preprocessing.image import ImageDataGenerator