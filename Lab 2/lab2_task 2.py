# -*- coding: utf-8 -*-
"""lab2_task

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s-Olw8nKOiKZL9Nb12VLdmW8Pd2Q3090
"""

import numpy as np

class NaiveBayesClassifier:
  def __init__(self):
    self.train_dataset = None
    self.train_labels = None
    self.train_size = 0
    self.num_features = 0
    self.num_classes = 0

  def fit(self, train_dataset, train_labels):
    self.train_dataset = train_dataset
    self.train_labels = train_labels
    # TODO
    self.train_size = train_dataset.shape[0]  #(900,2642)
    self.num_features = train_dataset.shape[1] #2643
    self.num_classes = np.amax(train_labels, axis=0)+1  #900

  def estimate_class_prior(self):  
    # TODO
    self.num_classes = np.amax(self.train_labels, axis=0)+1 
    class_prior = np.zeros((self.num_classes,))

    num_sentiment_analysis_positive=np.sum(self.train_labels==0)
    num_sentiment_analysis_neutral=np.sum(self.train_labels==1)
    num_sentiment_analysis_negative=np.sum(self.train_labels==2)
    # print(num_sentiment_analysis_positive, num_sentiment_analysis_neutral, num_sentiment_analysis_negative) --> 464 235 201

    sentiment_analysis_positive = (num_sentiment_analysis_positive+1)/(self.train_dataset.shape[0]+np.amax(self.train_labels, axis=0)+1)  # P(sentiment_analysis = positive)= 0.51
    sentiment_analysis_neutral = (num_sentiment_analysis_neutral+1)/(self.train_dataset.shape[0]+np.amax(self.train_labels, axis=0)+1)    # P(sentiment analysis = neutral)= 0.26
    sentiment_analysis_negative = (num_sentiment_analysis_negative+1)/(self.train_dataset.shape[0]+np.amax(self.train_labels, axis=0)+1)  # P(sentiment analysis = negative)=0.22
    # print(sentiment_analysis_positive, sentiment_analysis_neutral, sentiment_analysis_negative) --> 0.5149501661129569 0.26135105204872644 0.22369878183831673

    class_prior = np.append(np.append(sentiment_analysis_positive,sentiment_analysis_neutral), sentiment_analysis_negative)
    return class_prior

  def estimate_likelihoods(self):
    # TODO
    self.num_features = self.train_dataset.shape[1] #2643
    self.num_classes = np.amax(self.train_labels, axis=0)+1  #900
    likelihoods = np.zeros((self.num_features, self.num_classes)) #remove one parenthesis, error. ask desmond why
    
    class_0 = self.train_labels == 0
    class_0_int = np.array(class_0.astype(int))
    sample0 = np.dot(np.transpose(self.train_dataset), class_0_int)
    probability0 = ((sample0)+1)/(np.sum(self.train_labels==0) + 2)

    class_1 = self.train_labels == 1
    class_1_int = np.array(class_1.astype(int))
    sample1 = np.dot(np.transpose(self.train_dataset), class_1_int)
    probability1 = ((sample1)+1)/(np.sum(self.train_labels==1) + 2)

    class_2 = self.train_labels == 2
    class_2_int = np.array(class_2.astype(int)) #boolean --> integer so you can add up
    sample2 = np.dot(np.transpose(self.train_dataset), class_2_int)
    probability2 = ((sample2)+1)/(np.sum(self.train_labels==2) + 2)

    likelihoods = np.c_[probability0, probability1, probability2]
    return likelihoods

  def predict(self, test_dataset):
    class_prior = self.estimate_class_prior()
    yes_likelihoods = self.estimate_likelihoods()
    no_likelihoods = 1 - yes_likelihoods
    # TODO
    # return test_predict
    Plabel = class_prior
    test_size = self.num_classes-1    
    test_predict = np.zeros(test_size, ) 

    yesxdata_log = np.dot(test_dataset.astype(np.int64), np.log(yes_likelihoods)) #prob yes given symptoms(data)
    noxdata_log = np.dot(1-(test_dataset.astype(np.int64)), np.log(no_likelihoods)) #prob no given symptoms(data)

    max = yesxdata_log + noxdata_log + np.log(Plabel)
    test_predict = np.argmax(max, axis = 1)

    return test_predict